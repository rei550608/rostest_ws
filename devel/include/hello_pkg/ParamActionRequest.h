// Generated by gencpp from file hello_pkg/ParamActionRequest.msg
// DO NOT EDIT!


#ifndef HELLO_PKG_MESSAGE_PARAMACTIONREQUEST_H
#define HELLO_PKG_MESSAGE_PARAMACTIONREQUEST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hello_pkg
{
template <class ContainerAllocator>
struct ParamActionRequest_
{
  typedef ParamActionRequest_<ContainerAllocator> Type;

  ParamActionRequest_()
    : action()
    , paramName()
    , value(0)
    , filename()  {
    }
  ParamActionRequest_(const ContainerAllocator& _alloc)
    : action(_alloc)
    , paramName(_alloc)
    , value(0)
    , filename(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _action_type;
  _action_type action;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _paramName_type;
  _paramName_type paramName;

   typedef int64_t _value_type;
  _value_type value;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _filename_type;
  _filename_type filename;





  typedef boost::shared_ptr< ::hello_pkg::ParamActionRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hello_pkg::ParamActionRequest_<ContainerAllocator> const> ConstPtr;

}; // struct ParamActionRequest_

typedef ::hello_pkg::ParamActionRequest_<std::allocator<void> > ParamActionRequest;

typedef boost::shared_ptr< ::hello_pkg::ParamActionRequest > ParamActionRequestPtr;
typedef boost::shared_ptr< ::hello_pkg::ParamActionRequest const> ParamActionRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hello_pkg::ParamActionRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hello_pkg::ParamActionRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hello_pkg::ParamActionRequest_<ContainerAllocator1> & lhs, const ::hello_pkg::ParamActionRequest_<ContainerAllocator2> & rhs)
{
  return lhs.action == rhs.action &&
    lhs.paramName == rhs.paramName &&
    lhs.value == rhs.value &&
    lhs.filename == rhs.filename;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hello_pkg::ParamActionRequest_<ContainerAllocator1> & lhs, const ::hello_pkg::ParamActionRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hello_pkg

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::hello_pkg::ParamActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hello_pkg::ParamActionRequest_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_pkg::ParamActionRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hello_pkg::ParamActionRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_pkg::ParamActionRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hello_pkg::ParamActionRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hello_pkg::ParamActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "2e3e41e7c0781512dc5f8cc72daf61c9";
  }

  static const char* value(const ::hello_pkg::ParamActionRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x2e3e41e7c0781512ULL;
  static const uint64_t static_value2 = 0xdc5f8cc72daf61c9ULL;
};

template<class ContainerAllocator>
struct DataType< ::hello_pkg::ParamActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hello_pkg/ParamActionRequest";
  }

  static const char* value(const ::hello_pkg::ParamActionRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hello_pkg::ParamActionRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string  action\n"
"string  paramName\n"
"int64   value\n"
"string  filename\n"
;
  }

  static const char* value(const ::hello_pkg::ParamActionRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hello_pkg::ParamActionRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.action);
      stream.next(m.paramName);
      stream.next(m.value);
      stream.next(m.filename);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ParamActionRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hello_pkg::ParamActionRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hello_pkg::ParamActionRequest_<ContainerAllocator>& v)
  {
    s << indent << "action: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.action);
    s << indent << "paramName: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.paramName);
    s << indent << "value: ";
    Printer<int64_t>::stream(s, indent + "  ", v.value);
    s << indent << "filename: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.filename);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HELLO_PKG_MESSAGE_PARAMACTIONREQUEST_H
